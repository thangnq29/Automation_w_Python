{"name": "test_valid_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff69fa26f75+76917]\n\tGetHandleVerifier [0x0x7ff69fa26fd0+77008]\n\t(No symbol) [0x0x7ff69f7d9dea]\n\t(No symbol) [0x0x7ff69f830256]\n\t(No symbol) [0x0x7ff69f83050c]\n\t(No symbol) [0x0x7ff69f883887]\n\t(No symbol) [0x0x7ff69f8584af]\n\t(No symbol) [0x0x7ff69f88065c]\n\t(No symbol) [0x0x7ff69f858243]\n\t(No symbol) [0x0x7ff69f821431]\n\t(No symbol) [0x0x7ff69f8221c3]\n\tGetHandleVerifier [0x0x7ff69fcfd2ad+3051437]\n\tGetHandleVerifier [0x0x7ff69fcf7903+3028483]\n\tGetHandleVerifier [0x0x7ff69fd1589d+3151261]\n\tGetHandleVerifier [0x0x7ff69fa4183e+185662]\n\tGetHandleVerifier [0x0x7ff69fa496ff+218111]\n\tGetHandleVerifier [0x0x7ff69fa2faf4+112628]\n\tGetHandleVerifier [0x0x7ff69fa2fca9+113065]\n\tGetHandleVerifier [0x0x7ff69fa16c78+10616]\n\tBaseThreadInitThunk [0x0x7ffd91aae8d7+23]\n\tRtlUserThreadStart [0x0x7ffd9399c34c+44]", "trace": "self = <tests.test_login.TestLogin object at 0x0000021965DAAAD0>\n\n    @allure.story(\"Valid Login and Edit Info\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_valid_login(self):\n        login_page = LoginPage(self.driver)\n>       login_page.do_login(ConfigReader.get_username(), ConfigReader.get_password())\n\ntests\\test_login.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\login_page.py:12: in do_login\n    self.enter_username(username)\npages\\login_page.py:17: in enter_username\n    self.enter_text(self.username_input, username)\npages\\base_page.py:41: in enter_text\n    element = self.wait_for_element_visible(locator)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npages\\base_page.py:20: in wait_for_element_visible\n    return WebDriverWait(self.driver, self.timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2088f3b3721ce1db270acb122fa8c569\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000021965E4D8A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff69fa26f75+76917]\nE       \tGetHandleVerifier [0x0x7ff69fa26fd0+77008]\nE       \t(No symbol) [0x0x7ff69f7d9dea]\nE       \t(No symbol) [0x0x7ff69f830256]\nE       \t(No symbol) [0x0x7ff69f83050c]\nE       \t(No symbol) [0x0x7ff69f883887]\nE       \t(No symbol) [0x0x7ff69f8584af]\nE       \t(No symbol) [0x0x7ff69f88065c]\nE       \t(No symbol) [0x0x7ff69f858243]\nE       \t(No symbol) [0x0x7ff69f821431]\nE       \t(No symbol) [0x0x7ff69f8221c3]\nE       \tGetHandleVerifier [0x0x7ff69fcfd2ad+3051437]\nE       \tGetHandleVerifier [0x0x7ff69fcf7903+3028483]\nE       \tGetHandleVerifier [0x0x7ff69fd1589d+3151261]\nE       \tGetHandleVerifier [0x0x7ff69fa4183e+185662]\nE       \tGetHandleVerifier [0x0x7ff69fa496ff+218111]\nE       \tGetHandleVerifier [0x0x7ff69fa2faf4+112628]\nE       \tGetHandleVerifier [0x0x7ff69fa2fca9+113065]\nE       \tGetHandleVerifier [0x0x7ff69fa16c78+10616]\nE       \tBaseThreadInitThunk [0x0x7ffd91aae8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffd9399c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "start": 1752385024141, "stop": 1752385039489, "uuid": "cd679ead-e0af-4f22-ad39-c31ea477f8ca", "historyId": "e7f254b9bfd5f2bc8d4a1ffa6dc7aebb", "testCaseId": "e7f254b9bfd5f2bc8d4a1ffa6dc7aebb", "fullName": "tests.test_login.TestLogin#test_valid_login", "labels": [{"name": "story", "value": "Valid Login and Edit Info"}, {"name": "feature", "value": "Login and Edit Employee Info"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "HPVictus_16"}, {"name": "thread", "value": "15688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}