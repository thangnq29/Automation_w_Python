{"name": "test_valid_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=138.0.7204.101); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff69fa26f75+76917]\n\tGetHandleVerifier [0x0x7ff69fa26fd0+77008]\n\t(No symbol) [0x0x7ff69f7d9dea]\n\t(No symbol) [0x0x7ff69f7c5f15]\n\t(No symbol) [0x0x7ff69f7eabf4]\n\t(No symbol) [0x0x7ff69f85fa85]\n\t(No symbol) [0x0x7ff69f87ff72]\n\t(No symbol) [0x0x7ff69f858243]\n\t(No symbol) [0x0x7ff69f821431]\n\t(No symbol) [0x0x7ff69f8221c3]\n\tGetHandleVerifier [0x0x7ff69fcfd2ad+3051437]\n\tGetHandleVerifier [0x0x7ff69fcf7903+3028483]\n\tGetHandleVerifier [0x0x7ff69fd1589d+3151261]\n\tGetHandleVerifier [0x0x7ff69fa4183e+185662]\n\tGetHandleVerifier [0x0x7ff69fa496ff+218111]\n\tGetHandleVerifier [0x0x7ff69fa2faf4+112628]\n\tGetHandleVerifier [0x0x7ff69fa2fca9+113065]\n\tGetHandleVerifier [0x0x7ff69fa16c78+10616]\n\tBaseThreadInitThunk [0x0x7ffd91aae8d7+23]\n\tRtlUserThreadStart [0x0x7ffd9399c34c+44]", "trace": "self = <tests.test_login.TestLogin object at 0x00000265C0AD6AD0>\n\n    @allure.story(\"Valid Login and Edit Info\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_valid_login(self):\n        login_page = LoginPage(self.driver)\n>       login_page.do_login(ConfigReader.get_username(), ConfigReader.get_password())\n\ntests\\test_login.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\login_page.py:12: in do_login\n    self.enter_username(username)\npages\\login_page.py:17: in enter_username\n    self.enter_text(self.username_input, username)\npages\\base_page.py:41: in enter_text\n    element = self.wait_for_element_visible(locator)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npages\\base_page.py:20: in wait_for_element_visible\n    return WebDriverWait(self.driver, self.timeout).until(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:217: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000265C0B223C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff69fa16c78+10616]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd91aae8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd9399c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=138.0.7204.101); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff69fa26f75+76917]\nE       \tGetHandleVerifier [0x0x7ff69fa26fd0+77008]\nE       \t(No symbol) [0x0x7ff69f7d9dea]\nE       \t(No symbol) [0x0x7ff69f7c5f15]\nE       \t(No symbol) [0x0x7ff69f7eabf4]\nE       \t(No symbol) [0x0x7ff69f85fa85]\nE       \t(No symbol) [0x0x7ff69f87ff72]\nE       \t(No symbol) [0x0x7ff69f858243]\nE       \t(No symbol) [0x0x7ff69f821431]\nE       \t(No symbol) [0x0x7ff69f8221c3]\nE       \tGetHandleVerifier [0x0x7ff69fcfd2ad+3051437]\nE       \tGetHandleVerifier [0x0x7ff69fcf7903+3028483]\nE       \tGetHandleVerifier [0x0x7ff69fd1589d+3151261]\nE       \tGetHandleVerifier [0x0x7ff69fa4183e+185662]\nE       \tGetHandleVerifier [0x0x7ff69fa496ff+218111]\nE       \tGetHandleVerifier [0x0x7ff69fa2faf4+112628]\nE       \tGetHandleVerifier [0x0x7ff69fa2fca9+113065]\nE       \tGetHandleVerifier [0x0x7ff69fa16c78+10616]\nE       \tBaseThreadInitThunk [0x0x7ffd91aae8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffd9399c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "start": 1752385101522, "stop": 1752385113766, "uuid": "71b54644-e30b-4bee-b08b-0c77ba6a996d", "historyId": "e7f254b9bfd5f2bc8d4a1ffa6dc7aebb", "testCaseId": "e7f254b9bfd5f2bc8d4a1ffa6dc7aebb", "fullName": "tests.test_login.TestLogin#test_valid_login", "labels": [{"name": "story", "value": "Valid Login and Edit Info"}, {"name": "feature", "value": "Login and Edit Employee Info"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "HPVictus_16"}, {"name": "thread", "value": "5668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}